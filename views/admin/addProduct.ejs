<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add New Product</title>
    <link rel="stylesheet" href="/admin/css/addProduct.css">
    <link rel="stylesheet" href="/cropperjs/cropper.css">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css" rel="stylesheet">
</head>
<body>
    <%- include('../admin/adminpartials/Header') -%>

    <div class="content">
        <%- include('../admin/adminpartials/adminNav') -%>
        <%- include('../admin/adminpartials/adminSidebar') -%>

        <div class="form-container">
            <h1>Add New Product</h1>
            <form id="productForm" action="/pressAddproduct" method="post" enctype="multipart/form-data">
                <div class="form-group">
                    <label for="productName">Name</label>
                    <input type="text" id="productName" name="productName" placeholder="Enter product name" >
                    <span class="error-message" id="productNameErrMess"></span>
                </div>
                <div class="form-group">
                    <label for="productImg">Images</label>
                    <input type="file" id="productImg" name="productImg" accept="image/*" multiple onchange="displaySelectedImages(this)">
                    <div id="selectedImagesContainer"></div>
                    <span class="error-message" id="images-error"></span>
                </div>
                <div class="form-group">
                    <label for="description">Description</label>
                    <textarea id="description" name="description" rows="4" placeholder="Enter product description" ></textarea>
                    <span class="error-message" id="description-error"></span>
                </div>
                <div class="form-group">
                    <label for="stockQuantity">Stock Quantity</label>
                    <input type="number" id="stockQuantity" name="stockQuantity" placeholder="Enter stock quantity" >
                    <span class="error-message" id="quantity-error"></span>
                </div>
                <div class="form-group">
                    <label for="category">Category</label>
                    <select id="category" name="category" required>
                        <% allcats.forEach(element => { %>
                            <option value="<%= element._id %>"><%= element.name %></option>
                        <% }) %>
                    </select>
                    <span class="error-message" id="category-error"></span>
                </div>
                <div class="form-group">
                    <label for="brand">Brand</label>
                    <select id="brand" name="brand" required>
                        <% allbrands.forEach(element => { %>
                            <option value="<%= element._id %>"><%= element.name %></option>
                        <% }) %>
                    </select>
                    <span class="error-message" id="brand-error"></span>
                </div>
                <div class="form-group">
                    <label for="price">Price</label>
                    <input type="number" id="price" name="price" placeholder="Enter price" >
                    <span class="error-message" id="price-error"></span>
                </div>
                <div class="form-group">
                    <label for="Offerprice">Offer Price (optional)</label>
                    <input type="number" id="Offerprice" name="Offerprice" placeholder="Enter offer price">
                    <span class="error-message" id="offer-error"></span>
                </div>
                <div class="form-group">
                    <label for="expiryDate">Expiry Date</label>
                    <input type="date" id="expiryDate" name="expiryDate">
                    <span class="error-message" id="expiry-error"></span>
                </div>
                <div class="form-actions">
                    <button type="submit">Add Product</button>
                </div>
            </form>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>
    <script>
        document.getElementById('productForm').addEventListener('submit', function(event) {
            event.preventDefault();
            validateForm();
        });

        function validateForm() {
            const form = document.getElementById('productForm');
            const name = form.elements['productName'].value.trim();
            const description = form.elements['description'].value.trim();
            const price = form.elements['price'].value.trim();
            const offerPrice = form.elements['Offerprice'].value.trim();
            const expiryDate = form.elements['expiryDate'].value.trim();
            const quantity = form.elements['stockQuantity'].value.trim();
            const images = form.elements['productImg'].files;
            const category = form.elements['category'].value;
            const brand = form.elements['brand'].value;

            const errorMessages = document.querySelectorAll('.error-message');
            errorMessages.forEach(error => error.textContent = '');

            let isValid = true;

            if (name === '') {
                displayErrorMessage('Enter a valid product name', 'productNameErrMess');
                isValid = false;
            } else if (/[^a-zA-Z0-9\s]/.test(name)) {
                displayErrorMessage('Product name cannot contain special characters', 'productNameErrMess');
                isValid = false;
            }

            if (description === '') {
                displayErrorMessage('Enter a valid description', 'description-error');
                isValid = false;
            }

            if (price === '' || isNaN(price) || parseFloat(price) <= 0) {
                displayErrorMessage('Enter a positive number for price', 'price-error');
                isValid = false;
            }

            if (offerPrice !== '' && (isNaN(offerPrice) || parseFloat(offerPrice) <= 0)) {
                displayErrorMessage('Enter a positive number for offer price', 'offer-error');
                isValid = false;
            }

            if (offerPrice !== '' && expiryDate === '') {
                displayErrorMessage('Expiry date is required when offer price is set', 'expiry-error');
                isValid = false;
            } else if (expiryDate !== '') {
                const expiry = new Date(expiryDate);
                const today = new Date();
                today.setHours(0, 0, 0, 0);
                if (isNaN(expiry.getTime())) {
                    displayErrorMessage('Enter a valid expiry date', 'expiry-error');
                    isValid = false;
                } else if (expiry <= today) {
                    displayErrorMessage('Expiry date must be in the future', 'expiry-error');
                    isValid = false;
                }
            }

            if (quantity === '' || isNaN(quantity) || parseInt(quantity) <= 0) {
                displayErrorMessage('Enter a positive number for stock quantity', 'quantity-error');
                isValid = false;
            }else if(offerPrice>price){
                displayErrorMessage('Offer price cannot be greater than the product price', 'offer-error');
                isValid = false;
            }

            if (images.length === 0) {
                displayErrorMessage('Product Image is required', 'images-error');
                isValid = false;
            }

            if (category === '') {
                displayErrorMessage('Product Category is required', 'category-error');
                isValid = false;
            }

            if (brand === '') {
                displayErrorMessage('Product Brand is required', 'brand-error');
                isValid = false;
            }

            if (isValid) {
                form.submit();
            }
        }

        function displayErrorMessage(message, elementId) {
            const errorSpan = document.getElementById(elementId);
            errorSpan.textContent = message;
            errorSpan.style.color = 'red';
        }

        function displayErrorMessage(message, elementId) {
            const errorSpan = document.getElementById(elementId);
            errorSpan.textContent = message;
            errorSpan.style.color = 'red';
        }


// cropperjs
   
       

        function displaySelectedImages(input) {
    const selectedImagesContainer = document.getElementById("selectedImagesContainer");
    selectedImagesContainer.innerHTML = "";

    for (let i = 0; i < input.files.length; i++) {
        const file = input.files[i];
        const reader = new FileReader();
        const cropContainer = document.createElement("div");
        cropContainer.classList.add("image-crop-container");
        cropContainer.innerHTML = `
            <div class="image-container">
                <img id="image${i}" src="" alt="Select an image to crop">
            </div>
            <button class="crop-button" id="cropButton${i}">Crop Image ${i + 1}</button>
        `;
        selectedImagesContainer.appendChild(cropContainer);

        const image = cropContainer.querySelector(`#image${i}`);
        const cropButton = cropContainer.querySelector(`#cropButton${i}`);

        reader.onload = () => {
            image.src = reader.result;
            let cropper = new Cropper(image, {
                aspectRatio: 1,
                viewMode: 1,
            });

            cropButton.addEventListener("click", (event) => {
                event.preventDefault();
                if (cropper) {
                    const canvas = cropper.getCroppedCanvas();
                    const croppedImageDataURL = canvas.toDataURL('image/png'); // Use PNG for lossless quality
                    image.src = croppedImageDataURL;
                    const croppedImageFile = dataURLToFile(croppedImageDataURL, file.name);
                    const currentFiles = Array.from(input.files);
                    currentFiles[i] = croppedImageFile;

                    const newFileList = createFileList(currentFiles);
                    input.files = newFileList;
                    cropper.destroy();
                    cropper = null;
                } else {
                    cropper = new Cropper(image, {
                        aspectRatio: 20/9,
                        viewMode: 1,
                        minCropBoxWidth: 230,
                        minCropBoxHeight: 90
                    });
                }
            });
        };
        reader.readAsDataURL(file);
    }
}

function dataURLToFile(dataurl, filename) {
    const arr = dataurl.split(',');
    const mime = arr[0].match(/:(.*?);/)[1];
    const bstr = atob(arr[1]);
    let n = bstr.length;
    const u8arr = new Uint8Array(n);
    while (n--) {
        u8arr[n] = bstr.charCodeAt(n);
    }
    return new File([u8arr], filename, { type: mime });
}

function createFileList(files) {
    const dataTransfer = new DataTransfer();
    files.forEach(file => dataTransfer.items.add(file));
    return dataTransfer.files;
}

    </script>

</body>
</html>
